#!/bin/bash

# webm-by-dbt v1.3

# extract file name from input file path
infile=$(basename "$1")

# write source file name into log file and stdout
mkdir "./webm"
echo "converting $1:" | tee -a "./webm/$infile.log"

# loop until user types 'q' at end of conversion
cont=""
while [ -z "$cont" ]; do
    # get user input
    echo "start time (hh:mm:ss.t)"
    read start
    echo "duration (seconds[.decimals])"
    read duration
    echo "y-resolution {720, 540, 360}"
    read v_res
    echo "audio? [y|N]"
    read audio
    echo "output file name"
    read output

    # calculate secondary params
    if [ "$v_res" = "720" ]; then
        h_res="1280"
    elif [ "$v_res" = "540" ]; then
        h_res="960"
    elif [ "$v_res" = "360" ]; then
        h_res="640"
    else
        echo "invalid resolution"
        exit
    fi
    if [ "$audio" = "y" ]; then
        audiocmd="-c:a libvorbis -b:a 192K -vbr on -ac 2"
        maxsize=3800
    else
        audio="N"
        audiocmd="-an"
        maxsize=3000
    fi
    bitrate=$(echo "(8*$maxsize/$duration)" | bc)

    # write user params into stdout and logfile
    echo "-----------------------" | tee -a "./webm/$infile.log"
    echo "start:       $start" | tee -a "./webm/$infile.log"
    echo "duration:    $duration s" | tee -a "./webm/$infile.log"
    echo "max bitrate: $bitrate kbps" | tee -a "./webm/$infile.log"
    echo "output file: ./webm/$output.webm" | tee -a "./webm/$infile.log"
    echo "resolution:  $h_res x $v_res" | tee -a "./webm/$infile.log"
    echo "audio:       $audiocmd" | tee -a "./webm/$infile.log"
    echo "Press [Enter] to start converting!"
    read confirm

    # first pass
    echo "ffmpeg -hide_banner -loglevel \"info\" -y -ss \"$start\" -t \"$duration\" -i \"$1\" -c:v libvpx -pass 1 -qmin 0 -qmax 50 -crf 10 -b:v 1M -threads 3 -speed 4 -g 128 -an -sn -f webm \"/dev/null\""
    ffmpeg -hide_banner -loglevel "info" -y -ss "$start" -t "$duration" -i "$1" -c:v libvpx -pass 1 -qmin 0 -qmax 50 -crf 10 -b:v 1M -threads 3 -speed 4 -g 128 -an -sn -f webm "/dev/null"

    # second pass
    echo "ffmpeg -hide_banner -loglevel \"info\" -ss \"$start\" -t \"$duration\" -i \"$1\" -c:v libvpx -pass 2 -qmin 0 -qmax 50 -crf 10 -b:v \"$bitrate\" -s \"$h_res:$v_res\" $audiocmd -threads 3 -speed 0 -auto-alt-ref 1 -lag-in-frames 25 -g 128 -sn -f webm \"./webm/$output.webm\""
    ffmpeg -hide_banner -loglevel "info" -ss "$start" -t "$duration" -i "$1" -c:v libvpx -pass 2 -qmin 0 -qmax 50 -crf 10 -b:v "$bitrate"k -s "$h_res:$v_res" $audiocmd -threads 3 -speed 0 -auto-alt-ref 1 -lag-in-frames 25 -g 128 -sn -f webm "./webm/$output.webm"

    # cleanup
    rm ffmpeg2pass-0.log
    
    # make another webm?
    echo "Press [Enter] to make another webm from this file,"
    echo "enter anything and press [Enter] to quit!"
    read cont
done
echo "" | tee -a "./webm/$infile.log"
echo "Exiting."
